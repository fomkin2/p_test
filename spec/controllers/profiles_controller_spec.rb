require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProfilesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Profile. As you add validations to Profile, be sure to
  # adjust the attributes here as well.
  let(:valid_profile) {
    user = create :user
    user.confirm
    build :profile, user: user
  }

  let(:invalid_profile) {
    build :profile, name: nil
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProfilesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #show" do
    it "assigns the requested profile as @profile" do
      valid_profile.save
      sign_in :user, valid_profile.user
      get :show
      expect(assigns(:profile)).to eq(valid_profile)
    end
  end

  describe "GET #edit" do
    it "assigns the requested profile as @profile" do
      valid_profile.save
      sign_in :user, valid_profile.user
      get :edit
      expect(assigns(:profile)).to eq(valid_profile)
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_profile) {
        build :profile, name: 'new name'
      }

      it "updates the requested profile" do
        valid_profile.save
        sign_in :user, valid_profile.user
        put :update, { :profile => new_profile.attributes }
        valid_profile.reload
        expect(valid_profile.name).to eq(new_profile.name)
      end

      it "assigns the requested profile as @profile" do
        valid_profile.save
        sign_in :user, valid_profile.user
        put :update, { :profile => valid_profile.attributes }
        expect(assigns(:profile)).to eq(valid_profile)
      end

      it "redirects to the profile" do
        valid_profile.save
        sign_in :user, valid_profile.user
        put :update, { :profile => valid_profile.attributes }
        expect(response).to redirect_to('/profile')
      end
    end

    context "with invalid params" do
      it "assigns the profile as @profile" do
        valid_profile.save
        sign_in :user, valid_profile.user
        put :update, { :profile => invalid_profile.attributes }
        expect(assigns(:profile)).to eq(valid_profile)
      end

      it "re-renders the 'edit' template" do
        valid_profile.save
        sign_in :user, valid_profile.user
        put :update, { :profile => invalid_profile.attributes }
        expect(response).to render_template("edit")
      end
    end
  end

end
