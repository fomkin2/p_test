require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CartsController, type: :controller do

  before(:example) do
    @user = create :user
    @user.confirm
    sign_in :user, @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Cart. As you add validations to Cart, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    product = create :product
    return { product_id: product.id, number: 1 }
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    return { product_id: 0 }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CartsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all carts as @carts" do
      product = create :product
      cart = create :cart, user: @user, product: product
      get :index, format: :json
      expect(assigns(:carts)).to eq([cart])
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "add a product to Cart" do
        expect {
          post :create, {:cart => valid_attributes}
        }.to change(Cart, :count).by(1)
      end
    end

    context "with invalid params" do
      it "get 400" do
        post :create, {:cart => invalid_attributes}
        expect(response.status).to eq(400)
      end

      it "with error message" do
        post :create, {:cart => invalid_attributes}
        expect(response.body).to eq('product not exist')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested cart" do
      cart = Cart.create! valid_attributes.merge(user: @user)
      expect {
        delete :destroy, {:id => cart.to_param}, valid_session
      }.to change(Cart, :count).by(-1)
    end
  end

end
